// <auto-generated />
using System;
using FromSingapore.Core.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FromSingapore.Migrations.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240923154646_AddEntities")]
    partial class AddEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FromSingapore.Core.Context.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("FromSingapore.Core.Context.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("FromSingapore.Core.Context.Domain", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Domains");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("FromSingapore.Core.Context.Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("DomainId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LinkExpirationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LinkPasswordId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LinkVisitLimitId")
                        .HasColumnType("uuid");

                    b.Property<string>("OriginalUri")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LinkExpirationId");

                    b.HasIndex("LinkPasswordId");

                    b.HasIndex("LinkVisitLimitId");

                    b.HasIndex("DomainId", "ShortCode")
                        .IsUnique();

                    b.ToTable("Links");
                });

            modelBuilder.Entity("FromSingapore.Core.Context.LinkExpiration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("LinkExpirations");
                });

            modelBuilder.Entity("FromSingapore.Core.Context.LinkPassword", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LinkPasswords");
                });

            modelBuilder.Entity("FromSingapore.Core.Context.LinkVisit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("LinkId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("VisitedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("LinkId");

                    b.ToTable("LinkVisits");
                });

            modelBuilder.Entity("FromSingapore.Core.Context.LinkVisitLimit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Max")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("LinkVisitLimits");
                });

            modelBuilder.Entity("FromSingapore.Core.Context.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Subscriptions");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("FromSingapore.Core.Context.SubscriptionPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("BuiltIn")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("SubscriptionPlans");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FromSingapore.Core.Context.FreeDomain", b =>
                {
                    b.HasBaseType("FromSingapore.Core.Context.Domain");

                    b.ToTable("FreeDomains");
                });

            modelBuilder.Entity("FromSingapore.Core.Context.PaidDomain", b =>
                {
                    b.HasBaseType("FromSingapore.Core.Context.Domain");

                    b.Property<Guid>("DomainSubscriptionId")
                        .HasColumnType("uuid");

                    b.HasIndex("DomainSubscriptionId");

                    b.ToTable("PaidDomains");
                });

            modelBuilder.Entity("FromSingapore.Core.Context.DomainSubscription", b =>
                {
                    b.HasBaseType("FromSingapore.Core.Context.Subscription");

                    b.Property<Guid>("DomainSubscriptionPlanId")
                        .HasColumnType("uuid");

                    b.HasIndex("DomainSubscriptionPlanId");

                    b.ToTable("DomainSubscriptions");
                });

            modelBuilder.Entity("FromSingapore.Core.Context.LinkSubscription", b =>
                {
                    b.HasBaseType("FromSingapore.Core.Context.Subscription");

                    b.Property<Guid>("LinkSubscriptionPlanId")
                        .HasColumnType("uuid");

                    b.HasIndex("LinkSubscriptionPlanId");

                    b.ToTable("LinkSubscriptions");
                });

            modelBuilder.Entity("FromSingapore.Core.Context.DomainSubscriptionPlan", b =>
                {
                    b.HasBaseType("FromSingapore.Core.Context.SubscriptionPlan");

                    b.ToTable("DomainSubscriptionPlans");
                });

            modelBuilder.Entity("FromSingapore.Core.Context.LinkSubscriptionPlan", b =>
                {
                    b.HasBaseType("FromSingapore.Core.Context.SubscriptionPlan");

                    b.ToTable("LinkSubscriptionPlans");
                });

            modelBuilder.Entity("FromSingapore.Core.Context.Link", b =>
                {
                    b.HasOne("FromSingapore.Core.Context.Domain", "Domain")
                        .WithMany("Links")
                        .HasForeignKey("DomainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FromSingapore.Core.Context.LinkExpiration", "LinkExiration")
                        .WithMany()
                        .HasForeignKey("LinkExpirationId");

                    b.HasOne("FromSingapore.Core.Context.LinkPassword", "LinkPassword")
                        .WithMany()
                        .HasForeignKey("LinkPasswordId");

                    b.HasOne("FromSingapore.Core.Context.LinkVisitLimit", "LinkVisitLimit")
                        .WithMany()
                        .HasForeignKey("LinkVisitLimitId");

                    b.Navigation("Domain");

                    b.Navigation("LinkExiration");

                    b.Navigation("LinkPassword");

                    b.Navigation("LinkVisitLimit");
                });

            modelBuilder.Entity("FromSingapore.Core.Context.LinkVisit", b =>
                {
                    b.HasOne("FromSingapore.Core.Context.Link", "Link")
                        .WithMany()
                        .HasForeignKey("LinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Link");
                });

            modelBuilder.Entity("FromSingapore.Core.Context.Subscription", b =>
                {
                    b.HasOne("FromSingapore.Core.Context.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("FromSingapore.Core.Context.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("FromSingapore.Core.Context.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("FromSingapore.Core.Context.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("FromSingapore.Core.Context.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FromSingapore.Core.Context.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("FromSingapore.Core.Context.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FromSingapore.Core.Context.FreeDomain", b =>
                {
                    b.HasOne("FromSingapore.Core.Context.Domain", null)
                        .WithOne()
                        .HasForeignKey("FromSingapore.Core.Context.FreeDomain", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FromSingapore.Core.Context.PaidDomain", b =>
                {
                    b.HasOne("FromSingapore.Core.Context.DomainSubscription", "DomainSubscription")
                        .WithMany()
                        .HasForeignKey("DomainSubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FromSingapore.Core.Context.Domain", null)
                        .WithOne()
                        .HasForeignKey("FromSingapore.Core.Context.PaidDomain", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DomainSubscription");
                });

            modelBuilder.Entity("FromSingapore.Core.Context.DomainSubscription", b =>
                {
                    b.HasOne("FromSingapore.Core.Context.DomainSubscriptionPlan", "DomainSubscriptionPlan")
                        .WithMany()
                        .HasForeignKey("DomainSubscriptionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FromSingapore.Core.Context.Subscription", null)
                        .WithOne()
                        .HasForeignKey("FromSingapore.Core.Context.DomainSubscription", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DomainSubscriptionPlan");
                });

            modelBuilder.Entity("FromSingapore.Core.Context.LinkSubscription", b =>
                {
                    b.HasOne("FromSingapore.Core.Context.Subscription", null)
                        .WithOne()
                        .HasForeignKey("FromSingapore.Core.Context.LinkSubscription", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FromSingapore.Core.Context.LinkSubscriptionPlan", "LinkSubscriptionPlan")
                        .WithMany()
                        .HasForeignKey("LinkSubscriptionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LinkSubscriptionPlan");
                });

            modelBuilder.Entity("FromSingapore.Core.Context.DomainSubscriptionPlan", b =>
                {
                    b.HasOne("FromSingapore.Core.Context.SubscriptionPlan", null)
                        .WithOne()
                        .HasForeignKey("FromSingapore.Core.Context.DomainSubscriptionPlan", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FromSingapore.Core.Context.LinkSubscriptionPlan", b =>
                {
                    b.HasOne("FromSingapore.Core.Context.SubscriptionPlan", null)
                        .WithOne()
                        .HasForeignKey("FromSingapore.Core.Context.LinkSubscriptionPlan", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FromSingapore.Core.Context.Domain", b =>
                {
                    b.Navigation("Links");
                });
#pragma warning restore 612, 618
        }
    }
}
